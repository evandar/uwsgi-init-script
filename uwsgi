#!/bin/bash
### BEGIN INIT INFO
# Provides:          uwsgi
# Required-Start:    $local_fs $remote_fs $network
# Required-Stop:     $local_fs $remote_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts/stops/reloads uWSGI emperor.
# Description:       Management of uWSGI server in emperor mode.

# Author: Tomáš Pecka <tomaspecka@gmail.com>

# TODO: return codes http://refspecs.linuxbase.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/iniscrptact.html
#	config
#	log

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="uWSGI emperor mode"
NAME="uwsgi"
DAEMON=/usr/local/bin/uwsgi
PIDFILE=/var/run/uwsgi.pid
LOGFILE=/var/log/nginx/uwsgi.log

#CONFFILE=/etc/uwsgi/emperor.conf
SITES_ENABLED=/etc/uwsgi/sites-enabled/
USER=www-data
GROUP=www-data


# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 5

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME


# Define LSB log_* functions.
. /lib/lsb/init-functions


superuser_check() {
	[ $EUID -eq 0 ] && return
	log_failure_msg "Superuser rights required."
        exit 4
}

# check for correct argument - action
if [ "$#" -ne 1 ]; then
	log_failure_msg "Usage: $SCRIPTNAME" \
			"{start|stop|status|reload|force-reload|restart"
	exit 4
fi



do_start()
{
	DAEMON_ARGS="--emperor $SITES_ENABLED --uid $USER --gid $GROUP --daemonize $LOGFILE --pidfile $PIDFILE"

        # Return
        #   0 if daemon has been started
        #   1 if daemon was already running
        #   other if daemon could not be started or a failure occured
        start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- $DAEMON_ARGS
}

do_stop()
{
        # Return
        #   0 if daemon has been stopped
        #   1 if daemon was already stopped
        #   other if daemon could not be stopped or a failure occurred
        start-stop-daemon --stop --quiet --retry=INT/30/KILL/5 --pidfile $PIDFILE --exec $DAEMON
}


case "$1" in
  start)
	log_daemon_msg "Starting" "$NAME"
	do_start
	exit $?
  ;;

  stop)
	log_daemon_msg "Stopping" "$NAME"
	do_stop
	exit $?
  ;;

  status)
	status_of_proc -p $PIDFILE $DAEMON $NAME
	exit $?
  ;;

  reload)
	# log_daemon_msg "Reloading config"
	# kill -HUP `cat $PIDFILE`
  ;;

  force-reload)
	# log_daemon_msg "Reloading config by force"
	# kill -TERM `cat $PIDFILE`
  ;;

  restart)
	$0 stop
	$0 start
  ;;

  *)
    echo "Usage: $SCRIPTNAME {start|stop|status|restart|reload}" >&2
    exit 2
  ;;
esac
